syntax = "proto2";

package sailbot.msg;

option cc_enable_arenas = true;

message SailCmd {
  optional float vel = 11;
  optional float voltage = 12;
  optional float pos = 13;
}

message RudderCmd {
  optional float vel = 11;
  optional float pos = 12;
}

message BallastCmd {
  optional float vel = 11;
}

message HeadingCmd {
  optional float heading = 9;
  optional float extra_sail = 10;
}

message Waypoint {
  optional float x = 1;
  optional float y = 2;
  optional float theta = 3;
}

message WaypointList {
  repeated Waypoint points = 1;
  // Whether or not to start these waypoints from the start.
  // If restart = false, then will start by going from points[0] to points[1].
  // If restart = true, then takes the current waypoint index, and starts from
  // there in the new waypoints.
  optional bool restart = 2 [default = true];
  // Whether or not we have defined the start point. If false, will attempt to go
  // to points[0] first; if true, will attempt to go to points[1], treating points[0]
  // as the start point (has implications for tacking).
  optional bool defined_start = 3 [default = true];
  optional bool repeat = 4 [default = false];
}

message ControlMode {
  enum MODE {
    MANUAL_RC = 0;
    AUTO = 1;
    MANUAL_WIFI = 2;
    DISABLE = 3;
    FILTERED_RC = 4;
  }
  enum TACKER {
    NONE = 0;
    LINE = 1;
    REWARD = 2;
    DISABLED = 3;
  }
  optional MODE winch_mode = 1;
  optional TACKER tacker = 2;
  optional MODE rudder_mode = 3;
  optional MODE rigid_mode = 4;
  optional MODE ballast_mode = 5;
}

message TackerConstants {
  optional float close_haul_angle = 1;
  optional float in_irons_cost = 2;
  optional float near_goal_cost = 3;
  optional float hysteresis_cost = 4;
  optional float diff_yaw_cost = 5;
  optional float momentum_cost = 6;
  optional float tacking_cost = 7;
}

message ControllerConstants {
  optional float max_rudder = 1;
  optional float rudder_kp = 2;
  optional float winch_kp = 3;
  optional float sail_heel_k = 4;
  optional float qf = 5;

  optional float rigid_port_servo_pos = 20;
  optional float rigid_starboard_servo_pos = 21;
}

message ZeroingConstants {
  optional int32 rudder_zero = 1;
  optional int32 winch_0_pot = 2;
  optional int32 winch_90_pot = 3;
}

message Vector3f {
  optional float x = 1;
  optional float y = 2;
  optional float z = 3;
}

message Vector3d {
  optional double x = 1;
  optional double y = 2;
  optional double z = 3;
}

message Quaternion {
  optional float w = 1;
  optional float x = 2;
  optional float y = 3;
  optional float z = 4;
}

message EulerAngles {
  optional float roll = 1;
  optional float pitch = 2;
  optional float yaw = 3;
}

message InternalBoatState {
  optional float sail = 1;
  optional float rudder = 2;
  optional float ballast = 3;
  optional float saildot = 4;
  optional float rudderdot = 5;
  optional float ballastdot = 6;
}

message TackerState {
  optional bool done = 1; // Whether the tacker has reached its last waypoint
  optional int32 last_waypoint = 2; // The current waypoint
}

message ChallengeControl {
  enum ChallengeType {
    STATION_KEEP = 1;
    WAYPOINT = 2;
    VISION = 3;
    OBSTACLE = 4;
  }
  optional ChallengeType challenge = 1;
}

message VisionData {
  message Buoy {
    optional float x = 1;
    optional float y = 2;
    optional float radius = 3;
  }
  optional float heading = 1;
  optional float confidence = 2;
  repeated Buoy buoys = 3;
}

message BoatState {
  // Use lat/lon in degrees for position on real boat
  // We keep the pos_float field for purposes of reading old logs.
  // In January of 2018, switched to double precision for position
  // to ensure that we will never encounter issues with latitude/longitude.
  // Previously, this wasn't an issue because there simply wasn't that
  // much precision in our movements (also, the Airmar only provides
  // a single precision floating point GPS point). However, as we
  // start to care more about meter/sub-meter level precision (e.g.,
  // for vision tasks), this will become more of an issue.
  optional Vector3f pos_float = 1 [deprecated = true];
  optional Vector3d pos = 6;
  optional Quaternion orientation = 2;
  optional Vector3f vel = 3;
  optional Vector3f omega = 4;
  optional InternalBoatState internal = 5;

  optional EulerAngles euler = 11;
}
