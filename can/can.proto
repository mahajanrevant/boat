syntax = "proto2";

import "control/actuator_cmd.proto";

package sailbot.msg.can;

option cc_enable_arenas = true;

message SystemTime {
  optional uint32 SID = 1;
  optional uint32 date = 4; // 2 bytes, days since epoch
  optional uint32 time = 5; // 4 bytes, 1/10000 seconds since midnight
}

enum DIRECTION_REFERENCE {
  TRUE = 0;
  MAGNETIC = 1;
}

message VesselHeading {
  optional uint32 SID = 1;
  optional float heading = 2; // radians
  optional float deviation = 3; // radians
  optional float variation = 4; // radians
  optional DIRECTION_REFERENCE reference = 5;
}

message RateOfTurn {
  optional uint32 SID = 1;
  optional float rate = 2; // radians / sec
}

message Attitude {
  optional uint32 SID = 1;
  optional float yaw = 2; // radians
  optional float pitch = 3; // radians
  optional float roll = 4; // radians
}

message TimeDate {
  optional uint32 day = 1; // days since epoch
  optional uint32 time = 2; // seconds since midnight
  optional int32 localoffset = 3; // minutes
}

message GNSSDOP {
  enum DOP_MODE {
    ONED = 0;
    TWOD = 1;
    THREED = 2;
    AUTO = 3;
    ERROR = 6;
  }
  optional uint32 SID = 1;
  optional DOP_MODE desired_mode = 2;
  optional DOP_MODE actual_mode = 3;
  optional uint32 reserved = 4;
  optional float hdop = 5;
  optional float vdop = 6;
  optional float tdop = 7;
}

message GNSSPositionData {
  optional uint32 SID = 1;
  optional uint32 day = 2; // Days since epoch
  optional uint32 time = 3; // secs since midnight;
  optional double latitude = 4; // degrees
  optional double longitude = 5; // degrees
  optional double altitude = 6; // meters
  enum GNSS_TYPE {
    GPS = 0;
    GLONASS = 1;
    GPS_GLONASS = 2;
    GPS_WAAS = 3;
    GPS_WAAS_GLONASS = 4;
    CHAYKA = 5;
    INTEGRATED = 6;
    SURVEYED = 7;
    GALILEO = 8;
  }
  optional GNSS_TYPE gnss_type = 7;
  enum GNSS_METHOD {
    NO_GNSS = 0;
    GNSS_FIX = 1;
    DGNSS_FIX = 2;
    PRECISE_GNSS = 3;
    RTK_FIXED_INT = 4;
    RTK_FLOAT = 5;
    ESTIMATED_DR_MODE = 6;
    MANUAL_INPUT = 7;
    SIMULATE_MODE = 8;
  }
  optional GNSS_METHOD gnss_method = 8;
  enum GNSS_INTEGRITY {
    NONE = 0;
    SAFE = 1;
    CAUTION = 2;
  }
  optional GNSS_INTEGRITY gnss_integrity = 9;
  optional uint32 reserved = 10;
  optional uint32 n_satellites = 11; // Number of satellites used in calculation
  optional float HDOP = 12; // horizontal dilution of precision
  optional float PDOP = 13; // Probable dilution of precision
  optional float geoidal_separation = 14; // Geoidal Separation, meters
  optional uint32 n_reference_stations = 15;
  optional GNSS_TYPE reference_station_type = 16;
  optional uint32 reference_station_id = 17;
  optional float dgnss_correction_age = 18; // seconds
}

message PosRapidUpdate {
  optional double lat = 1; // degrees
  optional double lon = 2; // degrees
}

// SOG and COG refer to speed and course over ground (ie, this provides
// the current velocity of the boat).
message COGSOGRapidUpdate {
  optional uint32 SID = 1;
  optional DIRECTION_REFERENCE cog_reference = 2;
  optional uint32 reserved = 3;
  optional float COG = 4; // radians
  optional float SOG = 5; // m/s
  optional uint32 reserved2 = 6;
}

message WindData {
  optional uint32 SID = 1;
  optional float wind_speed = 2; // m/s
  optional float wind_angle = 3; // radians
  enum WIND_REFERENCE {
    TRUE_NORTH_REF = 0;
    MAGNETIC_NORTH_REF = 1;
    APPARENT = 2;
    TRUE_BOAT_REF = 3;
    TRUE_WATER_REF = 4;
  }
  optional WIND_REFERENCE reference = 4;
}

message AnalogPot {
  optional uint32 val = 1;
  optional uint32 current = 2;
}

message PWMWrite {
  optional uint32 winch = 1;
  optional uint32 rudder = 2;
  optional uint32 ballast = 3;
}

// Purely a testing message:
message DebugSCAMP {
  optional uint32 data1 = 1;
  optional uint32 data2 = 2;
}

message SailbotState {
  optional ControlMode.MODE rigid = 1;
  optional ControlMode.MODE ballast = 2;
  optional ControlMode.MODE winch = 3;
  optional ControlMode.MODE rudder = 4;
  optional ControlMode.TACKER tacker = 5;
}

message SailbotConn {
  enum ConnectionState {
    GOOD = 0;
    BAD = 1;
    UNKNOWN = 15;
  }
  optional ConnectionState rigid_conn = 1;
  optional ConnectionState radio_conn = 2;
  optional ConnectionState wifi_conn = 3;
  optional ConnectionState jetson_conn = 4;
  optional ConnectionState ui_conn = 5;
}

message CANMaster {
  optional bool outgoing = 1 [default = true]; // Whether to send out over wire
  optional SystemTime sys_time = 126992;
  optional VesselHeading heading = 127250;
  optional RateOfTurn rate_turn = 127251;
  optional Attitude attitude = 127257;
  optional PosRapidUpdate pos_rapid_update = 129025;
  optional COGSOGRapidUpdate cog_rapid_update = 129026;
  optional GNSSPositionData gnss_pos = 129029;
  optional TimeDate time_and_date = 129033;
  optional GNSSDOP gnss_dop = 129539;
  optional WindData wind_data = 130306;

  optional AnalogPot analog_pot = 65281;
  optional PWMWrite pwm_write = 65282;
  optional DebugSCAMP debug_scamp1 = 65283;
  optional DebugSCAMP debug_scamp2 = 65284;
  optional SailbotState sailbot_state = 65296;
  optional SailbotConn sailbot_conn = 65297;
}
